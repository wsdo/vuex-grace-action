{"version":3,"sources":["index.js"],"names":["isFunc","v","isObject","isPromise","obj","then","hasPromise","Object","keys","some","key","hasDeps","fn","getDeps","dispatchAction","commit","action","status","type","payload","STATUS","PENDING","SUCCESS","ERROR","commitPending","commitSuccess","commitError","createAction","payloadCreator","finalPayloadCreator","args","dispatch","result","assign","data","error","promiseQueue","buildPromiseQueue","run","catch","console","log","createActionStatus"],"mappings":";AA6EO,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,mBAAA,QAAA,aAAA,QAAA,OAAA,QAAA,QAAA,QAAA,WAAA,QAAA,UAAA,QAAA,SAAA,QAAA,YAAA,EAvEA,IAAMA,EAAS,SAAAC,GAAK,MAAa,mBAANA,GAuE3B,QAAA,OAAA,EAtEA,IAAMC,EAAW,SAAAD,GAAKA,OAAAA,GAAkB,WAAb,EAAOA,IAsElC,QAAA,SAAA,EArEA,IAAME,EAAY,SAAAC,GAAOF,OAAAA,EAASE,IAAQJ,EAAOI,EAAIC,OAqErD,QAAA,UAAA,EApEA,IAAMC,EAAa,SAAAF,GACxBF,OAAAA,EAASE,IAAQG,OAAOC,KAAKJ,GAAKK,KAAK,SAAAC,GAAOP,OAAAA,EAAUC,EAAIM,OAmEvD,QAAA,WAAA,EAlEA,IAAMC,EAAU,SAAAC,GAAMC,OAAgB,OAAhBA,QAAQD,IAkE9B,QAAA,QAAA,EA/DP,IAAME,EAAiB,SAACC,EAAQC,EAAQC,GAEtCF,EAD0BC,EAAlBE,KACK,CAAED,OAAAA,EAAQE,QADGH,EAAZG,WAIHC,EAAS,CACpBC,QAAS,UACTC,QAAS,UACTC,MAAO,SAuDF,QAAA,OAAA,EArDP,IAAMC,EAAgB,SAACT,EAAQC,GAC7BD,EAAOC,EAAOE,KAAM,CAAED,OAAQG,EAAOC,QAASF,QAAS,QAGnDM,EAAgB,SAACV,EAAQC,GAC7BF,EAAeC,EAAQC,EAAQI,EAAOE,UAGlCI,EAAc,SAACX,EAAQC,GAC3BF,EAAeC,EAAQC,EAAQI,EAAOG,QAG3BI,EAAe,SAACT,EAAMU,GAC3BC,IAAAA,EAAsB7B,EAAO4B,GAC/BA,EACA,WAAA,OAAA,UAAA,QAAA,OAAA,EAAA,UAAA,IACG,OAAA,SAAmC,GAATE,IAAvBC,IAAAA,EAAAA,EAAAA,SAAUhB,EAAAA,EAAAA,OAAae,EAAAA,UAAAA,OAAAA,EAAS,IAAA,MAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAATA,EAAS,EAAA,GAAA,UAAA,GAClCX,IAAAA,EAAUU,EAAA,WAAuBC,EAAAA,GACjCd,EAAS,CAAEE,KAAAA,EAAMC,QAAAA,GACvBJ,EAASA,GAAUgB,EACf,IACE5B,GAAAA,EAAUgB,GACLA,OAAAA,EAAQd,KACb,SAAA2B,GAKSA,OAJPP,EACEV,EACAR,OAAO0B,OAAOjB,EAAQ,CAAEG,QAASa,EAAOE,QAEnCF,EAAOE,MAEhB,SAAAC,GACET,OAAAA,EAAYX,EAAQR,OAAO0B,OAAOjB,EAAQ,CAAEG,QAASgB,OAIvD7B,GAAAA,EAAWa,GAAU,CACjBiB,IAAAA,EAAeC,kBAAkBlB,GAEhCiB,OADPZ,EAAcT,EAAQC,GACfoB,EACJE,IADIF,MAAAA,EACGN,GACPzB,KAAK,SAAA2B,GAAUP,OAAAA,EAAcV,EAAQC,KACrCuB,MAAM,SAAAJ,GACLT,OAAAA,EAAYX,EAAQR,OAAO0B,OAAOjB,EAAQ,CAAEG,QAASgB,OAIpDV,OAAAA,EAAcV,EAAQC,GAC7B,MAAOmB,GACPK,QAAQC,IAAIN,MAKX,QAAA,aAAA,EAAA,IAAMO,EAAqB,SAACxB,EAAMU,GACjCC,IAAAA,EAAsB7B,EAAO4B,GAC/BA,EACA,WAAA,OAAA,UAAA,QAAA,OAAA,EAAA,UAAA,IACG,OAAA,SAAmC,GAATE,IAAvBC,IAAAA,EAAAA,EAAAA,SAAUhB,EAAAA,EAAAA,OAAae,EAAAA,UAAAA,OAAAA,EAAS,IAAA,MAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAATA,EAAS,EAAA,GAAA,UAAA,GAClCX,IAAAA,EAAUU,EAAA,WAAuBC,EAAAA,GACjCd,EAAS,CAAEE,KAAAA,EAAMC,QAAAA,GACvBJ,EAASA,GAAUgB,EACf,IACE5B,GAAAA,EAAUgB,GAELA,OADPK,EAAcT,EAAQC,GACfG,EAAQd,KACb,SAAA2B,GAKSA,OAJPP,EACEV,EACAR,OAAO0B,OAAOjB,EAAQ,CAAEG,QAASa,EAAOE,QAEnCF,EAAOE,MAEhB,SAAAC,GACET,OAAAA,EAAYX,EAAQR,OAAO0B,OAAOjB,EAAQ,CAAEG,QAASgB,OAIvD7B,GAAAA,EAAWa,GAAU,CACjBiB,IAAAA,EAAeC,kBAAkBlB,GAEhCiB,OADPZ,EAAcT,EAAQC,GACfoB,EACJE,IADIF,MAAAA,EACGN,GACPzB,KAAK,SAAA2B,GAAUP,OAAAA,EAAcV,EAAQC,KACrCuB,MAAM,SAAAJ,GACLT,OAAAA,EAAYX,EAAQR,OAAO0B,OAAOjB,EAAQ,CAAEG,QAASgB,OAIpDV,OAAAA,EAAcV,EAAQC,GAC7B,MAAOmB,GACPK,QAAQC,IAAIN,MArCX,QAAA,mBAAA","file":"index.js","sourceRoot":"../src","sourcesContent":["/**\n * \n * @author starkwang \n * @blog shudong.wang \n */\n\nexport const isFunc = v => typeof v === 'function'\nexport const isObject = v => v && typeof v === 'object'\nexport const isPromise = obj => isObject(obj) && isFunc(obj.then)\nexport const hasPromise = obj =>\n  isObject(obj) && Object.keys(obj).some(key => isPromise(obj[key]))\nexport const hasDeps = fn => getDeps(fn) !== null\n\n\nconst dispatchAction = (commit, action, status) => {\n  const { type, payload } = action\n  commit(type, { status, payload })\n}\n\nexport const STATUS = {\n  PENDING: 'pending',\n  SUCCESS: 'success',\n  ERROR: 'error'\n}\nconst commitPending = (commit, action) => {\n  commit(action.type, { status: STATUS.PENDING, payload: null })\n}\n\nconst commitSuccess = (commit, action) => {\n  dispatchAction(commit, action, STATUS.SUCCESS)\n}\n\nconst commitError = (commit, action) => {\n  dispatchAction(commit, action, STATUS.ERROR)\n}\n\nexport const createAction = (type, payloadCreator) => {\n  const finalPayloadCreator = isFunc(payloadCreator)\n    ? payloadCreator\n    : (...args) => args[0]\n  return ({ dispatch, commit }, ...args) => {\n    const payload = finalPayloadCreator(...args)\n    const action = { type, payload }\n    commit = commit || dispatch\n    try {\n      if (isPromise(payload)) {\n        return payload.then(\n          result => {\n            commitSuccess(\n              commit,\n              Object.assign(action, { payload: result.data })\n            )\n            return result.data\n          },\n          error =>\n            commitError(commit, Object.assign(action, { payload: error }))\n        )\n      }\n\n      if (hasPromise(payload)) {\n        const promiseQueue = buildPromiseQueue(payload)\n        commitPending(commit, action)\n        return promiseQueue\n          .run(...args)\n          .then(result => commitSuccess(commit, action))\n          .catch(error =>\n            commitError(commit, Object.assign(action, { payload: error }))\n          )\n      }\n\n      return commitSuccess(commit, action)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n}\n\nexport const createActionStatus = (type, payloadCreator) => {\n  const finalPayloadCreator = isFunc(payloadCreator)\n    ? payloadCreator\n    : (...args) => args[0]\n  return ({ dispatch, commit }, ...args) => {\n    const payload = finalPayloadCreator(...args)\n    const action = { type, payload }\n    commit = commit || dispatch\n    try {\n      if (isPromise(payload)) {\n        commitPending(commit, action)\n        return payload.then(\n          result => {\n            commitSuccess(\n              commit,\n              Object.assign(action, { payload: result.data })\n            )\n            return result.data\n          },\n          error =>\n            commitError(commit, Object.assign(action, { payload: error }))\n        )\n      }\n\n      if (hasPromise(payload)) {\n        const promiseQueue = buildPromiseQueue(payload)\n        commitPending(commit, action)\n        return promiseQueue\n          .run(...args)\n          .then(result => commitSuccess(commit, action))\n          .catch(error =>\n            commitError(commit, Object.assign(action, { payload: error }))\n          )\n      }\n\n      return commitSuccess(commit, action)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n}\n"]}